const { lineBot3, lineBot2, adminUserId } = require("../services/lineBot");
const { createClient } = require("@supabase/supabase-js");
const moment = require("moment");

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const lineWebhook3 = async (req, res) => {
  try {
    const events = req.body.events;
    console.log("üì® Events ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", events); // ‚úÖ log ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    for (const event of events) {
      if (event.type === "postback") {
        console.log("üîÑ ‡∏£‡∏±‡∏ö postback ‡πÅ‡∏•‡πâ‡∏ß:", event.postback.data);
        const userId = event.source.userId;
        console.log("üßç‚Äç‚ôÇÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏∑‡∏≠:", userId);
        const postData = new URLSearchParams(event.postback.data);

        const action = postData.get("action"); // approve / reject
        const slipRef = postData.get("slip_ref"); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô slip_ref (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Flex)

        if (!slipRef) continue;

        let status = "rejected";
        let licenseNo = null;

        if (action === "approve") {
          const { data: lastLic } = await supabase
            .from("license_holders")
            .select("license_no")
            .order("license_no", { ascending: false })
            .limit(1);

          const lastNumber = lastLic?.[0]?.license_no?.split("-")[2] || "00000";
          const nextNumber = String(Number(lastNumber) + 1).padStart(5, "0");
          licenseNo = `ADT-01-7500-${nextNumber}`;
          status = "approved";
        }

        const { data: slipData } = await supabase
          .from("slip_submissions")
          .select("first_name, last_name, product_source")
          .eq("slip_ref", slipRef)
          .single();

        const { first_name, last_name, product_source } = slipData;

        await supabase
          .from("slip_submissions")
          .update({
            submissions_status: status,
            license_no: licenseNo
          })
          .eq("slip_ref", slipRef);

        const now = moment().format("YYYY-MM-DD HH:mm");

        if (status === "approved") {
          const reportText =
            `üîî TumCivil (Bot3) ‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n` +
            `‚úÖ License Number: ${licenseNo}\n` +
            `üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${first_name} ${last_name}\n` +
            `üßæ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product_source}\n` +
            `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${now}\n\n` +
            `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Verify License ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö`;

          await lineBot2.pushMessage(adminUserId, {
            type: "text",
            text: reportText
          });
        } else {
          await lineBot2.pushMessage(adminUserId, {
            type: "text",
            text: `‚ùå TumCivil ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏•‡∏¥‡∏õ ${slipRef}`
          });
        }
      }
    }

    return res.status(200).send("OK");
  } catch (err) {
    console.error("üî• LINE webhook3 error:", err);
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

module.exports = { lineWebhook3 };
