// üìÅ controllers/checkBlockedMachineController.js
const { supabase } = require('../utils/supabaseClient');
const logger = require('../utils/logger');

const checkBlockedMachine = async (req, res) => {
  const { machine_id } = req.body;
  const now = new Date().toISOString();

  if (!machine_id) {
    return res.status(400).send('Missing machine_id');
  }

  // üîç STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á registered_machines
  const { data: machineData, error: machineError } = await supabase
    .from('registered_machines')
    .select('status, expires_at')
    .eq('machine_id', machine_id)
    .maybeSingle();

  // üîç STEP 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á auth_sessions ‡∏ß‡πà‡∏≤ Ref.Code ‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏°‡∏±‡πâ‡∏¢
  const { data: sessionData, error: sessionError } = await supabase
    .from('auth_sessions')
    .select('ref_code')
    .eq('machine_id', machine_id)
    .maybeSingle();

  // ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
  if (!machineData) {
    logger.warn(`üÜï ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ: ${machine_id} ‚Üí ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Supabase`);

    const { error: insertErr } = await supabase
      .from('registered_machines')
      .insert({
        machine_id,
        status: 'ACTIVE',
        created_at: now,
        line_bot_status: 'NONE',
        line_status: 'none'
      });

    if (insertErr) {
      logger.error(`‚ùå Insert machine failed: ${insertErr.message}`);
      return res.status(500).send('Cannot insert machine');
    }

    // üîÑ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ref_code ‡∏î‡πâ‡∏ß‡∏¢ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà 100%
    if (!sessionData) {
      logger.warn(`üÜï ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Ref.Code ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ${machine_id} ‚Üí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö`);
      return res.status(200).send('NEW_USER');
    }

    logger.info(`‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ Ref.Code ‡πÅ‡∏•‡πâ‡∏ß`);
    return res.status(403).send('Machine registered - old user');
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å BLOCK ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
  if (machineData.status === 'BLOCK') {
    logger.warn(`üî¥ Machine "${machine_id}" ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ >> Go to SaleUserForm`);
    return res.status(200).send('BLOCKED');
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏±‡∏á ACTIVE ‡πÅ‡∏ï‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á BLOCK
  if (machineData.status === 'ACTIVE' && machineData.expires_at <= now) {
    const { error: updateError } = await supabase
      .from('registered_machines')
      .update({ status: 'BLOCK', status_update_at: now })
      .eq('machine_id', machine_id);

    if (updateError) {
      logger.error(`‚ùå Failed to BLOCK machine: ${machine_id}`);
      return res.status(500).send('Failed to block expired machine');
    }

    logger.warn(`üî¥ Machine "${machine_id}" ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‚Üí BLOCK ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à >> Go to SaleUserForm`);
    return res.status(200).send('BLOCKED');
  }

  // ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏≠‡πÄ‡∏Ñ ‚Üí ‡πÑ‡∏õ‡∏ï‡πà‡∏≠ UF_TrialAccess
  logger.info(`üü® Machine "${machine_id}" ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí Go to UF_TrialAccess ‚úÖ`);
  return res.status(403).send('Not expired');
};

module.exports = { checkBlockedMachine };
