const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');
require('dotenv').config();

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const requiredEnvVars = ['LINE_BOT2_ACCESS_TOKEN', 'ADMIN_LINE_BOT2_USER_ID'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error(`‚ùå ‡∏Ç‡∏≤‡∏î Environment Variables: ${missingEnvVars.join(', ')}`);
  process.exit(1);
}

// LINE Bot 2 Client
const client = new line.Client({
  channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN
});

// Input validation schema
const validateInput = (req, res, next) => {
  const { ref_code, duration } = req.body;
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (!ref_code || !duration) {
    return res.status(400).json({ 
      success: false,
      message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ref_code ‡πÅ‡∏•‡∏∞ duration',
      code: 'MISSING_REQUIRED_FIELDS'
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (typeof ref_code !== 'string' || typeof duration !== 'number') {
    return res.status(400).json({ 
      success: false,
      message: 'ref_code ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ duration ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô number',
      code: 'INVALID_DATA_TYPE'
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤ duration
  if (duration < 1 || duration > 15) {
    return res.status(400).json({ 
      success: false,
      message: 'duration ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-15 ‡∏ß‡∏±‡∏ô',
      code: 'INVALID_DURATION'
    });
  }

  next();
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
const createStarterPlanFlexMessage = (userData, ref_code, duration) => {
  const { first_name, last_name, phone_number, national_id, slip_image_url } = userData;
  const full_name = `${first_name} ${last_name}`;

  return {
    type: "flex",
    altText: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Starter Plan ‡∏Ç‡∏≠‡∏á ${full_name}`,
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà",
            size: "lg",
            weight: "bold",
            color: "#007BFF"
          },
          {
            type: "text",
            text: `Starter Plan - ${duration} ‡∏ß‡∏±‡∏ô`,
            size: "sm",
            color: "#666666",
            margin: "xs"
          }
        ],
        backgroundColor: "#F8F9FA",
        paddingAll: "lg"
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
          {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "text",
                text: "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
                weight: "bold",
                color: "#333333",
                size: "md"
              },
              { 
                type: "text", 
                text: `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${full_name}`, 
                wrap: true,
                size: "sm"
              },
              { 
                type: "text", 
                text: `üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone_number}`, 
                wrap: true,
                size: "sm"
              },
              { 
                type: "text", 
                text: `üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${national_id}`, 
                wrap: true,
                size: "sm"
              }
            ]
          },
          // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á
          {
            type: "separator",
            margin: "md"
          },
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
          {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "text",
                text: "üì¶ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à",
                weight: "bold",
                color: "#333333",
                size: "md"
              },
              { 
                type: "text", 
                text: `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${duration} ‡∏ß‡∏±‡∏ô`, 
                wrap: true,
                size: "sm"
              },
              { 
                type: "text", 
                text: `üî¢ Ref Code: ${ref_code}`, 
                wrap: true,
                size: "sm",
                color: "#007BFF"
              }
            ]
          }
        ],
        paddingAll: "lg"
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "md",
        contents: [
          // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          ...(slip_image_url ? [{
            type: "button",
            action: {
              type: "uri",
              label: "üìÑ ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô",
              uri: slip_image_url
            },
            style: "primary",
            color: "#007BFF"
          }] : []),
          // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
          {
            type: "box",
            layout: "horizontal",
            spacing: "sm",
            contents: [
              {
                type: "button",
                action: {
                  type: "postback",
                  label: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
                  data: `action=approve&ref_code=${ref_code}`
                },
                style: "primary",
                color: "#28A745",
                flex: 1
              },
              {
                type: "button",
                action: {
                  type: "postback",
                  label: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
                  data: `action=reject&ref_code=${ref_code}`
                },
                style: "secondary",
                flex: 1
              }
            ]
          }
        ],
        paddingAll: "lg"
      }
    }
  };
};

const sendStarterSlipToAdmin = async (req, res) => {
  const startTime = Date.now();
  
  try {
    const { ref_code, duration } = req.body;
    
    console.log(`üîç [${ref_code}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å starter_plan_users
    const { data: userData, error: fetchError } = await supabase
      .from('starter_plan_users')
      .select('first_name, last_name, phone_number, national_id, slip_image_url, submissions_status')
      .eq('ref_code', ref_code)
      .single();

    if (fetchError) {
      console.error(`‚ùå [${ref_code}] Database Error:`, fetchError);
      return res.status(404).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        code: 'REF_CODE_NOT_FOUND',
        ref_code
      });
    }

    if (!userData) {
      console.error(`‚ùå [${ref_code}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ`);
      return res.status(404).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        code: 'USER_DATA_NOT_FOUND',
        ref_code
      });
    }

    const { first_name, last_name, submissions_status } = userData;
    const full_name = `${first_name} ${last_name}`;
    
    console.log(`‚úÖ [${ref_code}] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${full_name}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    if (submissions_status === 'notified_admin') {
      console.log(`‚ö†Ô∏è [${ref_code}] ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
      return res.status(200).json({
        success: true,
        message: '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        code: 'ALREADY_NOTIFIED',
        ref_code,
        status: submissions_status
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
    const flexMessage = createStarterPlanFlexMessage(userData, ref_code, duration);

    const targetUserId = process.env.ADMIN_LINE_BOT2_USER_ID;
    
    console.log(`üì§ [${ref_code}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin: ${targetUserId}`);

    // ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin
    await client.pushMessage(targetUserId, flexMessage);

    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ [${ref_code}] ‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${processingTime}ms)`);

    return res.status(200).json({ 
      success: true,
      message: '‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        ref_code,
        duration,
        admin_notified: true,
        processing_time_ms: processingTime
      }
    });

  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error(`‚ùå ERROR @ sendStarterSlipToAdmin (${processingTime}ms):`, error);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á error
    let statusCode = 500;
    let errorCode = 'INTERNAL_SERVER_ERROR';
    
    if (error.message?.includes('Invalid user ID')) {
      statusCode = 400;
      errorCode = 'INVALID_ADMIN_USER_ID';
    } else if (error.message?.includes('channel access token')) {
      statusCode = 401;
      errorCode = 'INVALID_ACCESS_TOKEN';
    } else if (error.message?.includes('network')) {
      statusCode = 503;
      errorCode = 'NETWORK_ERROR';
    }

    return res.status(statusCode).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Flex Message',
      code: errorCode,
      error: process.env.NODE_ENV === 'development' ? error.message : undefined,
      processing_time_ms: processingTime
    });
  }
};

module.exports = {
  sendStarterSlipToAdmin,
  validateInput
};
