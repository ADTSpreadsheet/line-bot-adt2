const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');
require('dotenv').config();

const requiredEnvVars = ['LINE_BOT2_ACCESS_TOKEN', 'ADMIN_USER_ID_BOT2'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error(`‚ùå ‡∏Ç‡∏≤‡∏î Environment Variables: ${missingEnvVars.join(', ')}`);
  process.exit(1);
}

const client = new line.Client({
  channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN
});

const validateInput = (req, res, next) => {
  const { ref_code, duration } = req.body;

  if (!ref_code || !duration) {
    return res.status(400).json({ 
      success: false,
      message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ref_code ‡πÅ‡∏•‡∏∞ duration',
      code: 'MISSING_REQUIRED_FIELDS'
    });
  }

  if (typeof ref_code !== 'string' || typeof duration !== 'number') {
    return res.status(400).json({ 
      success: false,
      message: 'ref_code ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ duration ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô number',
      code: 'INVALID_DATA_TYPE'
    });
  }

  if (duration < 1 || duration > 15) {
    return res.status(400).json({ 
      success: false,
      message: 'duration ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-15 ‡∏ß‡∏±‡∏ô',
      code: 'INVALID_DURATION'
    });
  }

  next();
};

const createStarterPlanFlexMessage = (userData, ref_code, duration) => {
  const { first_name, last_name, phone_number, national_id, slip_image_url, order_number, price_thb } = userData;
  const full_name = `${first_name} ${last_name}`;

  return {
    type: "flex",
    altText: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Starter Plan ‡∏Ç‡∏≠‡∏á ${full_name}`,
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: `üîî Starter Plan no. ${order_number || 'N/A'}`,
            size: "md",
            weight: "bold",
            color: "#007BFF"
          }
        ],
        backgroundColor: "#F8F9FA",
        paddingAll: "sm"
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          { type: "text", text: `üî¢ Ref.Code: ${ref_code}`, size: "sm", weight: "bold", color: "#007BFF" },
          { type: "text", text: `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${full_name}`, size: "sm" },
          { type: "text", text: `üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone_number}`, size: "sm" },
          { type: "text", text: `üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${national_id}`, size: "sm" },
          { type: "text", text: `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${duration} ‡∏ß‡∏±‡∏ô`, size: "sm" },
          { type: "text", text: `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: ${price_thb || 'N/A'} ‡∏ö‡∏≤‡∏ó`, size: "sm" }
        ],
        paddingAll: "sm"
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ slip_image_url)
          ...(slip_image_url ? [{
            type: 'button',
            style: 'link',
            action: {
              type: 'uri',
              label: 'üìÑ ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ',
              uri: slip_image_url
            },
            height: "sm"
          }] : []),
          // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
          {
            type: 'box',
            layout: 'horizontal',
            spacing: 'sm',
            contents: [
              {
                type: 'button',
                style: 'primary',
                color: '#28a745',
                action: {
                  type: 'postback',
                  label: '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
                  data: `action=approve&ref_code=${ref_code}&plan_type=starter`
                },
                height: "sm"
              },
              {
                type: 'button',
                style: 'secondary',
                color: '#dc3545',
                action: {
                  type: 'postback',
                  label: '‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
                  data: `action=reject&ref_code=${ref_code}&plan_type=starter`
                },
                height: "sm"
              }
            ]
          }
        ],
        paddingAll: "sm"
      }
    }
  };
};

// üé® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
const createUpdatedAdminFlex = (userData, ref_code, action, actionData = {}) => {
  const { first_name, last_name, phone_number, national_id, slip_image_url, order_number, price_thb } = userData;
  const full_name = `${first_name} ${last_name}`;
  const isApproved = action === 'approved';
  const actionText = isApproved ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
  const statusColor = isApproved ? '#28a745' : '#dc3545';
  const statusIcon = isApproved ? '‚úÖ' : '‚ùå';

  return {
    type: "flex",
    altText: `${actionText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ${full_name} ‡πÅ‡∏•‡πâ‡∏ß`,
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: `${statusIcon} Starter Plan no. ${order_number || 'N/A'}`,
            size: "md",
            weight: "bold",
            color: statusColor
          }
        ],
        backgroundColor: "#F8F9FA",
        paddingAll: "sm"
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          { type: "text", text: `üî¢ Ref.Code: ${ref_code}`, size: "sm", weight: "bold", color: "#007BFF" },
          { type: "text", text: `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${full_name}`, size: "sm" },
          { type: "text", text: `üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${phone_number}`, size: "sm" },
          { type: "text", text: `üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${national_id}`, size: "sm" },
          { type: "text", text: `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${actionData.duration || 'N/A'} ‡∏ß‡∏±‡∏ô`, size: "sm" },
          { type: "text", text: `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: ${price_thb || 'N/A'} ‡∏ö‡∏≤‡∏ó`, size: "sm" }
        ],
        paddingAll: "sm"
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          {
            type: 'text',
            text: `${statusIcon} ${actionText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß`,
            weight: 'bold',
            color: statusColor,
            align: 'center',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: `${actionText}‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`,
            size: 'xs',
            color: '#666666',
            align: 'center',
            margin: 'sm'
          },
          // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          ...(slip_image_url ? [{
            type: 'button',
            style: 'link',
            action: {
              type: 'uri',
              label: 'üìÑ ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ',
              uri: slip_image_url
            },
            height: "sm",
            margin: "md"
          }] : [])
        ],
        paddingAll: "sm"
      }
    }
  };
};

const sendStarterSlipToAdmin = async (req, res) => {
  const startTime = Date.now();

  try {
    const { ref_code, duration } = req.body;

    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users:', { ref_code, duration });

    const { data: userData, error: fetchError } = await supabase
      .from('starter_plan_users')
      .select('first_name, last_name, phone_number, national_id, slip_image_url, submissions_status, order_number, price_thb')
      .eq('ref_code', ref_code)
      .single();

    if (fetchError || !userData) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users:', fetchError);
      return res.status(404).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠ ref_code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        ref_code
      });
    }

    console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', userData);

    if (userData.submissions_status === 'notified_admin') {
      console.log('‚ö†Ô∏è ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      return res.status(200).json({
        success: true,
        message: '‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        ref_code,
        duration
      });
    }

    console.log('üì± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message...');
    const flexMessage = createStarterPlanFlexMessage(userData, ref_code, duration);
    const adminId = process.env.ADMIN_USER_ID_BOT2;

    console.log('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Admin:', adminId);
    const result = await client.pushMessage(adminId, flexMessage);

    console.log('‚úÖ ‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // üéØ ‡πÄ‡∏Å‡πá‡∏ö messageId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    if (result.sentMessages && result.sentMessages.length > 0) {
      const messageId = result.sentMessages[0].id;
      console.log('üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö messageId:', messageId);

      const { error: updateError } = await supabase
        .from('starter_plan_users')
        .update({ admin_message_id: messageId })
        .eq('ref_code', ref_code);

      if (updateError) {
        console.error('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö messageId ‡πÑ‡∏î‡πâ:', updateError);
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Flex ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      } else {
        console.log('‚úÖ ‡πÄ‡∏Å‡πá‡∏ö messageId ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    }

    const processingTime = Date.now() - startTime;

    return res.status(200).json({
      success: true,
      message: '‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        ref_code,
        duration,
        admin_notified: true,
        processing_time_ms: processingTime
      }
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Flex Message:', error);
    const processingTime = Date.now() - startTime;

    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Flex Message',
      error: error.message,
      processing_time_ms: processingTime
    });
  }
};

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å API1)
const editAdminFlexMessage = async (req, res) => {
  try {
    const { ref_code, action, duration } = req.body;

    if (!ref_code || !action) {
      return res.status(400).json({ 
        success: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ref_code ‡πÅ‡∏•‡∏∞ action' 
      });
    }

    console.log(`üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message: ${ref_code} - ${action}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database
    const { data: userData, error: fetchError } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('ref_code', ref_code)
      .single();

    if (fetchError || !userData) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users:', fetchError);
      return res.status(404).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message' 
      });
    }

    if (!userData.admin_message_id) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö admin_message_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö', ref_code);
      return res.status(400).json({ 
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö messageId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡πÉ‡∏´‡∏°‡πà
    const durationDays = duration || Math.floor(userData.duration_minutes / 1440);
    const updatedFlex = createUpdatedAdminFlex(userData, ref_code, action, { duration: durationDays });

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message
    await client.editMessage(userData.admin_message_id, updatedFlex);

    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    return res.status(200).json({
      success: true,
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      ref_code,
      action
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message',
      error: error.message
    });
  }
};

module.exports = { 
  sendStarterSlipToAdmin,
  editAdminFlexMessage 
};
