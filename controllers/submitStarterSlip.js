const { supabase } = require('../utils/supabaseClient');
const uploadBase64Image = require('../utils/uploadBase64Image');
const axios = require('axios');
const line = require('@line/bot-sdk');

// LINE Bot Client (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ token)
let client = null;
if (process.env.LINE_BOT_ACCESS_TOKEN) {
  client = new line.Client({
    channelAccessToken: process.env.LINE_BOT_ACCESS_TOKEN
  });
} else {
  console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_BOT_ACCESS_TOKEN - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏ó‡∏ô');
}

async function submitStarterSlip(req, res) {
  try {
    const {
      ref_code,
      first_name,
      last_name,
      national_id,
      phone_number,
      duration,
      file_content
    } = req.body;

    // ‚úÖ Logic 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!ref_code || !first_name || !last_name || !national_id || !phone_number || !duration || !file_content) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‚úÖ Logic 2.1: ‡∏ï‡∏£‡∏ß‡∏à ref_code ‡πÉ‡∏ô auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('serial_key, line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö sessionData:', sessionError);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { serial_key, line_user_id } = sessionData;
    
    // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å auth_sessions:');
    console.log('- ref_code:', ref_code);
    console.log('- serial_key:', serial_key);
    console.log('- line_user_id:', line_user_id);

    const duration_minutes = duration * 1440;

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
    const slipFileName = `SP-${ref_code}.jpg`;

    // ‚úÖ Logic 2.2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤ Supabase
    const { publicUrl, error: uploadError } = await uploadBase64Image({
      base64String: file_content,
      fileName: slipFileName,
      bucketName: 'statercustumer',
      folderName: ref_code
    });

    if (uploadError) {
      console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", uploadError);
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: uploadError });
    }

    // ‚úÖ Logic 2.3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á starter_plan_users
    const insertResult = await supabase
      .from('starter_plan_users')
      .insert([
        {
          ref_code,
          first_name,
          last_name,
          national_id,
          phone_number,
          duration_minutes,
          remaining_minutes: duration_minutes,
          used_minutes: 0,
          slip_image_url: publicUrl,
          submissions_status: 'pending',
          line_user_id
        }
      ]);

    if (insertResult.error) {
      console.error("‚ùå insert starter_plan_users ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", insertResult.error);
      return res.status(500).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: insertResult.error });
    }

    // ‚úÖ Logic 3: ‡πÅ‡∏à‡πâ‡∏á Bot2 ‡∏ú‡πà‡∏≤‡∏ô API2
    console.log('üõ∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á:', `${process.env.API2_URL}/starter/notify-admin-slip`);
    
    let response;
    try {
      response = await axios.post(`${process.env.API2_URL}/starter/notify-admin-slip`, {
        ref_code,
        duration
      }, {
        timeout: 10000 // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      });
    } catch (apiError) {
      console.error('‚ùå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API notify-admin-slip ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', apiError.message);
      return res.status(500).json({ 
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ', 
        error: apiError.message 
      });
    }

    // ‚úÖ Logic 4: ‡∏ñ‡πâ‡∏≤ API2 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™ 200 ‡∏û‡∏£‡πâ‡∏≠‡∏° ref_code ‡πÅ‡∏•‡∏∞ duration
    if (response.status === 200 && response.data) {
      console.log('‚úÖ API2 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.data);
      
      // üîç ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API2 response (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô data.data)
      const apiData = response.data.data || response.data;
      const { ref_code: returnedRefCode, duration: returnedDuration } = apiData;
      
      console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API2:');
      console.log('- Response structure:', response.data);
      console.log('- Returned ref_code:', returnedRefCode);
      console.log('- Returned duration:', returnedDuration);
      
      if (!returnedRefCode) {
        console.error('‚ùå API2 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á ref_code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤');
        console.error('Full response:', JSON.stringify(response.data, null, 2));
        return res.status(500).json({ message: 'API2 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á ref_code ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤' });
      }

      // ‚úÖ ‡πÉ‡∏ä‡πâ ref_code ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API2 ‡πÑ‡∏õ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ line_user_id ‡πÉ‡∏´‡∏°‡πà
      const { data: sessionData2, error: sessionError2 } = await supabase
        .from('auth_sessions')
        .select('serial_key, line_user_id')
        .eq('ref_code', returnedRefCode)
        .single();

      if (sessionError2 || !sessionData2) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auth_sessions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code:', returnedRefCode);
        return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code: ${returnedRefCode} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö` });
      }

      const { serial_key: finalSerialKey, line_user_id: finalLineUserId } = sessionData2;
      
      console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏à‡∏≤‡∏Å auth_sessions:');
      console.log('- serial_key:', finalSerialKey);
      console.log('- line_user_id:', finalLineUserId);

      if (!finalLineUserId) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö line_user_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code:', returnedRefCode);
        return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö LINE User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ref_code: ${returnedRefCode}` });
      }

      const username = `ADT-${returnedRefCode}`;
      const password = finalSerialKey;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password
      const { error: updateError } = await supabase
        .from('starter_plan_users')
        .update({ username, password })
        .eq('ref_code', returnedRefCode);

      if (updateError) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', updateError);
        return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      }

      // ‚úÖ ‡∏™‡πà‡∏á Flex ‡πÑ‡∏õ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      try {
        if (client) {
          console.log('üì± ‡πÉ‡∏ä‡πâ LINE SDK ‡∏™‡πà‡∏á Flex Message');
          
          const flexMessage = {
            type: "flex",
            altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            contents: {
              type: "bubble",
              header: {
                type: "box",
                layout: "vertical",
                contents: [
                  {
                    type: "text",
                    text: "üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                    weight: "bold",
                    color: "#007BFF",
                    size: "lg"
                  }
                ],
                backgroundColor: "#F8F9FA",
                paddingAll: "lg"
              },
              body: {
                type: "box",
                layout: "vertical",
                spacing: "md",
                contents: [
                  {
                    type: "text",
                    text: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Starter Plan ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠:",
                    weight: "bold",
                    size: "md"
                  },
                  {
                    type: "text",
                    text: `- Ref.Code: ${returnedRefCode}`,
                    size: "sm"
                  },
                  {
                    type: "text",
                    text: `- Username: ${username}`,
                    size: "sm"
                  },
                  {
                    type: "text",
                    text: `- Password: ${password}`,
                    size: "sm"
                  },
                  {
                    type: "text",
                    text: `- ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${returnedDuration} ‡∏ß‡∏±‡∏ô`,
                    size: "sm"
                  },
                  {
                    type: "text",
                    text: "‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Login ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ",
                    wrap: true,
                    size: "sm",
                    color: "#28A745"
                  }
                ],
                paddingAll: "lg"
              }
            }
          };

          console.log('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE User:', finalLineUserId);
          const lineResponse = await client.pushMessage(finalLineUserId, flexMessage);
          console.log('‚úÖ ‡∏™‡πà‡∏á LINE Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', lineResponse);
          
        } else {
          console.log('üåê ‡πÉ‡∏ä‡πâ axios ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Bot ‡∏≠‡∏∑‡πà‡∏ô');
          
          const notifyResponse = await axios.post(`${process.env.API2_URL}/starter/notify-user-starter`, {
            ref_code: returnedRefCode,          
            duration: returnedDuration,
            line_user_id: finalLineUserId
          }, {
            timeout: 10000
          });
          
          console.log('‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å notify-user-starter ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', notifyResponse.status);
        }

        return res.status(200).json({
          message: '‚úÖ ‡∏™‡πà‡∏á Flex ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
          data: {
            ref_code: returnedRefCode,
            username,
            duration: returnedDuration
          }
        });
        
      } catch (flexError) {
        console.error('‚ùå ‡∏™‡πà‡∏á Flex Message ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', flexError);
        
        return res.status(200).json({
          message: '‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          warning: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot',
          data: {
            ref_code: returnedRefCode,
            username,
            duration: returnedDuration
          },
          error: flexError.message
        });
      }
      
    } else {
      console.error('‚ùå API2 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', response.status, response.data);
      return res.status(500).json({ 
        message: '‚ùå API2 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤',
        status: response.status,
        data: response.data
      });
    }

  } catch (err) {
    console.error('‚ùå ERROR @ submitStarterSlip:', err);
    return res.status(500).json({ 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 
      error: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
}

module.exports = submitStarterSlip;
