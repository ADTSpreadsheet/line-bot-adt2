const axios = require('axios');
const line = require('@line/bot-sdk');
const editAdminFlexMessage = require('./submitStarterSlip').editAdminFlexMessage;
require('dotenv').config();

const client = new line.Client({
  channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN
});

const handleTumcivilWebhook = async (req, res) => {
  try {
    const events = req.body.events;
    
    for (const event of events) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ Redelivery - ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô retry
      if (event.deliveryContext?.isRedelivery) {
        console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° Redelivery Request');
        continue;
      }
      
      if (event.type === 'postback') {
        const data = new URLSearchParams(event.postback.data);
        const action = data.get('action');
        const ref_code = data.get('ref_code');
        const license_no = data.get('license_no');      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pro Plan
        const plan_type = data.get('plan_type');        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Starter Plan
        
        // ‡πÅ‡∏™‡∏î‡∏á log ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const planInfo = license_no || plan_type || 'unknown';
        console.log(`üì• TumCivil Admin ‡∏Å‡∏î${action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}: ${ref_code}, ${planInfo}`);
        
        if (action === 'approve' || action === 'reject') {
          try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API1 processOrder (endpoint ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å plan)
            const requestBody = {
              ref_code,
              action,
              license_no,    // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Starter Plan
              plan_type      // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pro Plan
            };

            console.log('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API1 processOrder:', requestBody);

            const response = await axios.post(`https://line-bot-adt.onrender.com/processOrder`, requestBody);
            
            if (response.status === 200) {
              const actionText = action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
              const planName = plan_type ? 'Starter' : 'Professional';
              
              // üé® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Starter Plan)
              if (plan_type === 'starter') {
                try {
                  console.log('üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin...');
                  await editAdminFlexMessage({
                    body: { 
                      ref_code, 
                      action: action === 'approve' ? 'approved' : 'rejected',
                      duration: 1 // Starter Plan = 1 ‡∏ß‡∏±‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
                    }
                  });
                  console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                } catch (flexError) {
                  console.error('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡πÑ‡∏î‡πâ:', flexError.message);
                  // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                }
              }
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‚úÖ TumCivil ${actionText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nüì¶ ‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: ${planName} Plan\nüîñ Ref: ${ref_code}\nüè¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: TumCivil Admin`
              });
              
              console.log('‚úÖ TumCivil ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              return res.status(200).json({ message: 'TumCivil Success' });
            }
            
          } catch (apiError) {
            console.error('‚ùå TumCivil API Error:', apiError.response?.data || apiError.message);
            
            // Handle API errors specifically
            if (apiError.response && apiError.response.status === 400) {
              // Duplicate Error - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö 400 (‡πÑ‡∏°‡πà retry)
              const actionText = action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
              const errorMessage = `‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ref.Code ${ref_code}\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£${actionText}‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`;
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: errorMessage
              });
              
              return res.status(400).json({ message: 'Duplicate request handled' });
              
            } else if (apiError.response && apiError.response.status === 404) {
              // API1 ‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint
              const errorMessage = `‚ùå TumCivil ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á\n‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\nüîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: errorMessage
              });
              
              return res.status(500).json({ error: 'API endpoint not found' });
              
            } else {
              // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö 500 (‡∏≠‡∏≤‡∏à retry)
              const errorMessage = `‚ùå TumCivil ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á\nError: ${apiError.message}\nüîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: errorMessage
              });
              
              return res.status(500).json({ error: apiError.message });
            }
          }
        }
      }
    }
    
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ postback ‡∏´‡∏£‡∏∑‡∏≠ action ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    res.status(200).json({ message: 'No action processed' });
    
  } catch (error) {
    console.error('‚ùå TumCivil Webhook error:', error);
    res.status(500).json({ error: error.message });
  }
};

module.exports = { handleTumcivilWebhook };
