const axios = require('axios');
const line = require('@line/bot-sdk');
require('dotenv').config();

const client = new line.Client({
  channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN
});

const handleTumcivilWebhook = async (req, res) => {
  try {
    const events = req.body.events;
    
    for (const event of events) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ Redelivery - ‡∏Ç‡πâ‡∏≤‡∏° request ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô retry
      if (event.deliveryContext?.isRedelivery) {
        console.log('‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° Redelivery Request');
        continue;
      }
      
      if (event.type === 'postback') {
        const data = new URLSearchParams(event.postback.data);
        const action = data.get('action');
        const ref_code = data.get('ref_code');
        const license_no = data.get('license_no');
        
        console.log(`üì• TumCivil Admin ‡∏Å‡∏î${action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}: ${ref_code}, ${license_no}`);
        
        if (action === 'approve' || action === 'reject') {
          const status = action === 'approve' ? 'Ap' : 'Rj';
          
          try {
            // ‡∏¢‡∏¥‡∏á POST ‡πÑ‡∏õ API1
            const response = await axios.post(`https://line-bot-adt.onrender.com/${action}-order`, {
              ref_code,
              license_no,
              status
            });
            
            if (response.status === 200) {
              const statusText = action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: `‚úÖ TumCivil ${statusText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nüìã License: ${license_no}\nüîñ Ref: ${ref_code}\nüè¢ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: TumCivil Admin`
              });
              
              // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏≠‡∏ö 200
              return res.status(200).json({ message: 'TumCivil Success' });
            }
            
          } catch (apiError) {
            // Handle API errors specifically
            if (apiError.response && apiError.response.status === 400) {
              // Duplicate Error - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö 400 (‡πÑ‡∏°‡πà retry)
              const actionText = action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
              const errorMessage = `‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ref.Code ${ref_code}\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£${actionText}‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`;
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: errorMessage
              });
              
              // ‡∏ï‡∏≠‡∏ö 400 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ retry
              return res.status(400).json({ message: 'Duplicate request handled' });
            } else {
              // Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö 500 (‡∏≠‡∏≤‡∏à retry)
              const errorMessage = `‚ùå TumCivil ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á\nError: ${apiError.message}\nüîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤`;
              
              await client.replyMessage(event.replyToken, {
                type: 'text',
                text: errorMessage
              });
              
              // ‡∏ï‡∏≠‡∏ö 500 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ LINE ‡∏≠‡∏≤‡∏à retry ‡πÑ‡∏î‡πâ
              return res.status(500).json({ error: apiError.message });
            }
          }
        }
      }
    }
    
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ postback ‡∏´‡∏£‡∏∑‡∏≠ action ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    res.status(200).json({ message: 'No action processed' });
    
  } catch (error) {
    console.error('‚ùå TumCivil Webhook error:', error);
    // Error ‡∏£‡∏∞‡∏î‡∏±‡∏ö function - ‡∏ï‡∏≠‡∏ö 500
    res.status(500).json({ error: error.message });
  }
};

module.exports = { handleTumcivilWebhook };
