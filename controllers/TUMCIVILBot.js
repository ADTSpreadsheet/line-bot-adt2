const line = require('@line/bot-sdk');
require('dotenv').config();

// TUMCIVIL Bot Configuration
const config = {
  channelAccessToken: process.env.TUMCIVIL_BOT_ACCESS_TOKEN,
  channelSecret: process.env.TUMCIVIL_BOT_CHANNEL_SECRET
};

const client = new line.Client(config);

// üì• Webhook Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TUMCIVIL Bot
const handleTumcivilWebhook = async (req, res) => {
  try {
    console.log('ü§ñ TUMCIVIL Webhook received');
    
    const events = req.body.events;
    
    if (!events || events.length === 0) {
      return res.status(200).send('OK');
    }

    // Process each event
    const promises = events.map(async (event) => {
      console.log('üì• Event type:', event.type);
      console.log('üë§ User ID:', event.source?.userId);
      
      try {
        // Handle ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤
        if (event.type === 'message' && event.message.type === 'text') {
          const userId = event.source.userId;
          const messageText = event.message.text;
          
          console.log(`üí¨ Message from ${userId}: ${messageText}`);
          
          // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° User ID
          return client.replyMessage(event.replyToken, {
            type: 'text',
            text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏°! üëã\n\n` +
                  `üìã ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ${messageText}\n\n` +
                  `üÜî User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n${userId}\n\n` +
                  `üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å User ID ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô Environment Variables:\n` +
                  `TUMCIVIL_ADMIN_USER_ID=${userId}\n\n` +
                  `‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ADT!`
          });
        }
        
        // Handle ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô Add Friend
        if (event.type === 'follow') {
          const userId = event.source.userId;
          
          console.log(`üéâ New follower: ${userId}`);
          
          return client.replyMessage(event.replyToken, {
            type: 'text',
            text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà TUMCIVIL Bot!\n\n` +
                  `üë§ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏° User ID:\n${userId}\n\n` +
                  `üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥ User ID ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables:\n` +
                  `TUMCIVIL_ADMIN_USER_ID=${userId}\n\n` +
                  `üîî ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß!`
          });
        }
        
        // Handle ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô Unfollow
        if (event.type === 'unfollow') {
          const userId = event.source.userId;
          console.log(`üò¢ User unfollowed: ${userId}`);
        }
        
        // Handle Postback (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° Flex Message)
        if (event.type === 'postback') {
          const userId = event.source.userId;
          const postbackData = event.postback.data;
          
          console.log(`üîò Postback from ${userId}: ${postbackData}`);
          
          // Parse postback data (approve_order&ADT157&32XO)
          const [action, licenseNo, refCode] = postbackData.split('&');
          
          if (action === 'approve_order') {
            return client.replyMessage(event.replyToken, {
              type: 'text',
              text: `‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                    `üìã License: ${licenseNo}\n` +
                    `üîñ Ref: ${refCode}\n\n` +
                    `üìß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö`
            });
          }
          
          if (action === 'reject_order') {
            return client.replyMessage(event.replyToken, {
              type: 'text',
              text: `‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß!\n\n` +
                    `üìã License: ${licenseNo}\n` +
                    `üîñ Ref: ${refCode}\n\n` +
                    `üìß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ`
            });
          }
        }
        
        return Promise.resolve(null);
        
      } catch (error) {
        console.error('‚ùå Error processing event:', error);
        return Promise.resolve(null);
      }
    });

    await Promise.all(promises);
    console.log('‚úÖ All events processed successfully');
    
    res.status(200).send('OK');
    
  } catch (error) {
    console.error('‚ùå TUMCIVIL Webhook error:', error);
    res.status(500).json({ 
      message: 'Internal Server Error',
      error: error.message 
    });
  }
};

// üì§ ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏° (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å sendOrderFlex)
const notifyTumcivilAdmin = async (flexMessage) => {
  try {
    const targetUserId = process.env.TUMCIVIL_ADMIN_USER_ID;
    
    if (!targetUserId) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö TUMCIVIL_ADMIN_USER_ID ‡πÉ‡∏ô Environment Variables');
    }
    
    console.log('üì§ Sending notification to TUMCIVIL Admin:', targetUserId);
    
    await client.pushMessage(targetUserId, flexMessage);
    
    console.log('‚úÖ Notification sent successfully to TUMCIVIL Admin');
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Failed to send notification to TUMCIVIL Admin:', error);
    return { success: false, error: error.message };
  }
};

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
const testTumcivilMessage = async (req, res) => {
  try {
    const { message } = req.body;
    
    const targetUserId = process.env.TUMCIVIL_ADMIN_USER_ID;
    
    if (!targetUserId) {
      return res.status(400).json({ 
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö TUMCIVIL_ADMIN_USER_ID' 
      });
    }
    
    await client.pushMessage(targetUserId, {
      type: 'text',
      text: message || 'üß™ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å TUMCIVIL Bot!'
    });
    
    res.status(200).json({ 
      message: '‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      targetUserId 
    });
    
  } catch (error) {
    console.error('‚ùå Test message error:', error);
    res.status(500).json({ 
      message: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: error.message 
    });
  }
};

module.exports = {
  handleTumcivilWebhook,
  notifyTumcivilAdmin,
  testTumcivilMessage
};
