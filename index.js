// index.js
require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const bodyParser = require('body-parser');
const { createClient } = require('@supabase/supabase-js');
const app = express();
const PORT = process.env.PORT || 10000;

// Line configuration
const lineConfig = {
  channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN,
  channelSecret: process.env.LINE_BOT2_CHANNEL_SECRET
};

// Supabase configuration
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Middleware
app.use(bodyParser.json());

// LINE webhook middleware for signature verification
const lineMiddleware = line.middleware(lineConfig);

// LINE webhook route
app.post('/webhook', lineMiddleware, (req, res) => {
  // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 200 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  console.log("üì≤ LINE Webhook triggered");
  res.status(200).end();
  
  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
  try {
    const events = req.body.events;
    console.log(`üì• Received ${events ? events.length : 0} events from LINE Platform`);
    
    if (events && events.length > 0) {
      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      events.forEach(async (event) => {
        console.log(`üîç Processing event type: ${event.type}`);
        
        // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if (event.type === 'message' && event.message.type === 'text') {
          const userId = event.source.userId;
          const text = event.message.text;
          
          console.log(`üìù Received message: "${text}" from user: ${userId}`);
          
          // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
          try {
            const client = new line.Client(lineConfig);
            await client.replyMessage(event.replyToken, {
              type: 'text',
              text: `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text}`
            });
            console.log(`‚úÖ Replied to message from user: ${userId}`);
          } catch (replyError) {
            console.error('‚ùå Error replying to message:', replyError.message);
          }
        } else if (event.type === 'follow') {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
          const userId = event.source.userId;
          console.log(`üéâ User ${userId} added the bot as a friend`);
          
          try {
            const client = new line.Client(lineConfig);
            await client.pushMessage(userId, {
              type: 'text',
              text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤'
            });
            console.log(`‚úÖ Sent welcome message to user: ${userId}`);
          } catch (pushError) {
            console.error('‚ùå Error sending welcome message:', pushError.message);
          }
        } else if (event.type === 'unfollow') {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏ö‡∏≠‡∏ó
          const userId = event.source.userId;
          console.log(`üëã User ${userId} blocked the bot`);
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error handling webhook:', error.message);
  }
});

app.post('/webhook2', async (req, res) => {
  // üõ°Ô∏è LINE Developer ‡∏≠‡∏≤‡∏à‡∏¢‡∏¥‡∏á payload test ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ ref_code ‡∏Å‡∏±‡∏ö machine_id
  if (!req.body.ref_code && !req.body.machine_id && req.body.destination && Array.isArray(req.body.events)) {
    console.log("üü° Received test webhook from LINE Developer. Sending 200 OK.");
    return res.status(200).send("OK");
  }

  try {
    console.log("üì• Received data from Excel VBA:", JSON.stringify(req.body, null, 2));

    const { 
      ref_code, 
      first_name, 
      last_name, 
      house_number, 
      district, 
      province, 
      phone_number, 
      email, 
      national_id,
      ip_address,
      machine_id 
    } = req.body;

    // üîê ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ Excel VBA ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (!ref_code) {
      console.log("‚ùå Missing required field: ref_code");
      return res.status(400).json({ 
        success: false, 
        message: "Reference Code is required" 
      });
    }

    ...

    
    const now = new Date();
    const expiresDate = new Date(now);
    expiresDate.setDate(now.getDate() + 7);
    console.log(`üìÖ Setting expiration date to: ${expiresDate.toISOString()}`);
    
    // Prepare registration data
    const registrationData = {
      ref_code,
      // line_user_id ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
      machine_id: machine_id || null,
      first_name: first_name || null,
      last_name: last_name || null,
      house_number: house_number || null,
      district: district || null,
      province: province || null,
      phone_number: phone_number || null,
      email: email || null,
      national_id: national_id || null,
      ip_address: ip_address || null,
      day_created_at: now.toISOString(),
      verify_at: now.toISOString(),
      expires_at: expiresDate.toISOString(),
      status: 'ACTIVE'
    };
    
    console.log("üìù Prepared registration data for Supabase insertion");
    
    // Insert registration
    const { data, error } = await supabase
      .from('user_registrations')
      .insert([registrationData])
      .select();
    
    // Handle insertion errors
    if (error) {
      console.error("‚ùå Supabase insert error:", error);
      
      // Specific error handling
      if (error.code === '23505') {
        return res.status(409).json({ 
          success: false, 
          message: "Registration already exists",
          error: error.message 
        });
      }
      
      if (error.code === '23503') {
        return res.status(400).json({ 
          success: false, 
          message: "Invalid reference data",
          error: error.message 
        });
      }
      
      // Generic error
      return res.status(422).json({ 
        success: false, 
        message: "Unprocessable Entity",
        error: error.message 
      });
    }
    
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Supabase
    console.log("‚úÖ Registration saved in Supabase:", data);

    // üìÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    const dateObj = new Date();
    const formattedDate = dateObj.toLocaleDateString("th-TH", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric"
    });
    const formattedTime = dateObj.toLocaleTimeString("th-TH", {
      hour: "2-digit",
      minute: "2-digit"
    });

    // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE (‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡∏î‡∏π‡∏î‡∏µ)
    const message = `‚úÖ ‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà\n` +
                    `Ref. Code: ${ref_code}\n` +
                    `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${formattedDate} ${formattedTime} ‡∏ô.`;

    // Define LINE user ID to notify
    const lineUserIdToNotify = process.env.ADMIN_LINE_USER_ID || 'Ub7406c5f05771fb36c32c1b1397539f6';
    console.log(`üì± Preparing to notify admin (${lineUserIdToNotify})`);

    // Send notification (non-blocking)
    try {
      await sendMessageToLineBot2(message, lineUserIdToNotify);
    } catch (lineError) {
      console.error("‚ö†Ô∏è Could not send LINE notification:", lineError.message);
    }

    // Return success response
    console.log("‚úÖ Returning success response to client");
    res.status(200).json({ 
      success: true, 
      message: "Registration successful",
      expires_at: expiresDate.toISOString()
    });

  } catch (error) {
    console.error("‚ùå Unexpected error in /webhook2:", error);
    res.status(500).json({ 
      success: false, 
      message: "Internal server error",
      error: error.message 
    });
  }
});

// Verify Status Route
app.post('/verify-status', async (req, res) => {
  try {
    console.log("üîç Verifying registration status:", JSON.stringify(req.body, null, 2));
    
    const { ref_code, machine_id } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!ref_code || !machine_id) {
      console.log("‚ùå Missing required fields for verification");
      return res.status(400).json({ 
        success: false, 
        message: "Reference Code and Machine ID are required" 
      });
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const { data, error } = await supabase
      .from('user_registrations')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('machine_id', machine_id)
      .single();
    
    if (error) {
      console.error("‚ùå Supabase query error:", error);
      return res.status(422).json({ 
        success: false, 
        message: "Error verifying registration",
        error: error.message 
      });
    }
    
    // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    if (!data) {
      console.log(`‚ùå No registration found for ref_code: ${ref_code} and machine_id: ${machine_id}`);
      return res.status(404).json({ 
        success: false, 
        message: "Registration not found" 
      });
    }
    
    console.log(`‚úÖ Found registration: ${JSON.stringify(data)}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (data.status === 'BLOCKED') {
      console.log(`üö´ Registration is blocked: ${ref_code}`);
      return res.status(403).json({ 
        success: false, 
        message: "Registration is blocked",
        status: "BLOCKED" 
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const now = new Date();
    const expiresAt = new Date(data.expires_at);
    
    if (now > expiresAt) {
      // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô EXPIRED
      console.log(`‚è±Ô∏è Registration has expired: ${ref_code}`);
      
      await supabase
        .from('user_registrations')
        .update({ status: 'EXPIRED' })
        .eq('ref_code', ref_code);
      
      return res.status(403).json({ 
        success: false, 
        message: "Registration has expired",
        status: "EXPIRED" 
      });
    }
    
    // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ACTIVE
    console.log(`‚úÖ Registration is active: ${ref_code}, expires on: ${expiresAt}`);
    res.status(200).json({ 
      success: true, 
      message: "Registration is active",
      status: "ACTIVE",
      expires_at: data.expires_at
    });
    
  } catch (error) {
    console.error("‚ùå Unexpected error in /verify-status:", error);
    res.status(500).json({ 
      success: false, 
      message: "Internal server error",
      error: error.message 
    });
  }
});

// Check Expired Registrations
async function checkExpiredRegistrations() {
  try {
    console.log("üîç Checking for expired registrations...");
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
    const { data, error } = await supabase
      .from('user_registrations')
      .update({ status: 'EXPIRED' })
      .eq('status', 'ACTIVE')
      .lt('expires_at', new Date().toISOString())
      .select();
    
    if (error) {
      console.error("‚ùå Error updating expired registrations:", error);
      return;
    }
    
    if (data && data.length > 0) {
      console.log(`‚úÖ Marked ${data.length} registrations as expired`);
      
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      const message = `‚è±Ô∏è ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô EXPIRED ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`;
      const lineUserIdToNotify = process.env.ADMIN_LINE_USER_ID || 'Ub7406c5f05771fb36c32c1b1397539f6';
      
      try {
        await sendMessageToLineBot2(message, lineUserIdToNotify);
      } catch (lineError) {
        console.error("‚ö†Ô∏è Could not send LINE notification:", lineError.message);
      }
    } else {
      console.log("‚úÖ No expired registrations found");
    }
  } catch (error) {
    console.error("‚ùå Unexpected error in checkExpiredRegistrations:", error);
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sendMessageToLineBot2
async function sendMessageToLineBot2(message, userId) {
  try {
    console.log(`üì§ Sending LINE message to ${userId}: ${message}`);
    const client = new line.Client(lineConfig);
    await client.pushMessage(userId, {
      type: 'text',
      text: message
    });
    console.log(`‚úÖ Sent notification to LINE user: ${userId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to send LINE message: ${error.message}`);
    throw error;
  }
}

// Server startup
app.listen(PORT, () => {
  console.log(`‚úÖ LINE Bot 2 is running on port ${PORT}`);
  console.log(`üåê LINE Webhook: /webhook`);
  console.log(`üåê Excel VBA Webhook: /webhook2`);
  console.log(`üåê Verification Status: /verify-status`);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  checkExpiredRegistrations();
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  setInterval(checkExpiredRegistrations, 3600000);
});
